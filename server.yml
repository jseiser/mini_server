- name: MiniServer
  hosts: miniserver
  tasks:
    - name: Install Base Packages
      become: true
      ansible.builtin.apt:
        name: "{{ base_packages }}"
        state: present
        update_cache: yes
      tags:
        - packages

    - name: Check mountpoint exist
      become: true
      ansible.builtin.file:
        path: "{{ nfs.mountpoint }}/{{ item.key }}"
        state: directory
        mode: "{{ nfs.permission }}"
        owner: root
        group: root
      loop: "{{ nfs.share_data | dict2items }}"
      tags:
        - nfs

    - name: Mount network share
      become: true
      ansible.posix.mount:
        src: "{{ nfs.server }}:{{ nfs.server_host }}{{ item.value }}"
        path: "{{ nfs.mountpoint }}/{{ item.key }}"
        fstype: nfs
        opts: "{{ nfs.myopts }}"
        state: mounted
      loop: "{{ nfs.share_data | dict2items }}"
      tags:
        - nfs

    - name: Docker Roles
      ansible.builtin.include_role:
        name: "{{ item }}"
        apply:
          become: true
      loop:
        - geerlingguy.pip
        - geerlingguy.docker
      tags:
        - docker

    - name: Create Docker Network
      community.docker.docker_network:
        name: "{{ common.docker_network_name }}"
      tags:
        - docker

    - name: SABNZBD
      community.docker.docker_container:
        name: "{{ sabnzbd.name }}"
        image: "{{ sabnzbd.image }}"
        env: "{{ sabnzbd.vars }}"
        volumes: "{{ sabnzbd.volumes }}"
        ports: "{{ sabnzbd.ports }}"
        restart_policy: "{{ sabnzbd.restart_policy }}"
        state: "{{ sabnzbd.state }}"
        networks:
          - name: "{{ sabnzbd.network_name }}"
      tags:
        - docker
        - sabnzbd

    - name: DELUGE
      community.docker.docker_container:
        name: "{{ deluge.name }}"
        image: "{{ deluge.image }}"
        env: "{{ deluge.vars }}"
        volumes: "{{ deluge.volumes }}"
        ports: "{{ deluge.ports }}"
        restart_policy: "{{ deluge.restart_policy }}"
        state: "{{ deluge.state }}"
        networks:
          - name: "{{ deluge.network_name }}"
      tags:
        - docker
        - deluge

    - name: NZBHYDR2
      community.docker.docker_container:
        name: "{{ nzbhydra2.name }}"
        image: "{{ nzbhydra2.image }}"
        env: "{{ nzbhydra2.vars }}"
        volumes: "{{ nzbhydra2.volumes }}"
        ports: "{{ nzbhydra2.ports }}"
        restart_policy: "{{ nzbhydra2.restart_policy }}"
        state: "{{ nzbhydra2.state }}"
        networks:
          - name: "{{ nzbhydra2.network_name }}"
      tags:
        - docker
        - nzbhydra2

    - name: JACKETT
      community.docker.docker_container:
        name: "{{ jackett.name }}"
        image: "{{ jackett.image }}"
        env: "{{ jackett.vars }}"
        volumes: "{{ jackett.volumes }}"
        ports: "{{ jackett.ports }}"
        restart_policy: "{{ jackett.restart_policy }}"
        state: "{{ jackett.state }}"
        networks:
          - name: "{{ jackett.network_name }}"
      tags:
        - docker
        - jackett

    - name: Jacket Dir
      ansible.builtin.file:
        path: "{{ common.config_dir }}/jackett/config/{{ item }}"
        state: directory
        mode: "0755"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - cardigann
        - cardigann/definitions
      tags:
        - docker
        - jackett
      register: jacket_files

    - name: Jacket Configs
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ common.config_dir }}/jackett/config/cardigann/definitions/{{ item }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"
      loop:
        - hpjradarr.yml
        - hpjsonarr.yml
      tags:
        - docker
        - jackett

    - name: JACKETT Restart # noqa no-handler
      community.docker.docker_container:
        name: "{{ jackett.name }}"
        image: "{{ jackett.image }}"
        state: "started"
      when: jacket_files.changed
      tags:
        - docker
        - jackett

    - name: RADARR
      community.docker.docker_container:
        name: "{{ radarr.name }}"
        image: "{{ radarr.image }}"
        env: "{{ radarr.vars }}"
        volumes: "{{ radarr.volumes }}"
        ports: "{{ radarr.ports }}"
        restart_policy: "{{ radarr.restart_policy }}"
        state: "{{ radarr.state }}"
        networks:
          - name: "{{ radarr.network_name }}"
      tags:
        - docker
        - radarr

    - name: SONARR
      community.docker.docker_container:
        name: "{{ sonarr.name }}"
        image: "{{ sonarr.image }}"
        env: "{{ sonarr.vars }}"
        volumes: "{{ sonarr.volumes }}"
        ports: "{{ sonarr.ports }}"
        restart_policy: "{{ sonarr.restart_policy }}"
        state: "{{ sonarr.state }}"
        networks:
          - name: "{{ sonarr.network_name }}"
      tags:
        - docker
        - sonarr

    - name: PLEX
      community.docker.docker_container:
        name: "{{ plex.name }}"
        image: "{{ plex.image }}"
        env: "{{ plex.vars }}"
        volumes: "{{ plex.volumes }}"
        ports: "{{ plex.ports }}"
        restart_policy: "{{ plex.restart_policy }}"
        state: "{{ plex.state }}"
        devices: "{{ plex.devices }}"
        networks:
          - name: "{{ plex.network_name }}"
      tags:
        - docker
        - plex

    - name: CALIBRE
      community.docker.docker_container:
        name: "{{ calibre.name }}"
        image: "{{ calibre.image }}"
        env: "{{ calibre.vars }}"
        volumes: "{{ calibre.volumes }}"
        ports: "{{ calibre.ports }}"
        restart_policy: "{{ calibre.restart_policy }}"
        state: "{{ calibre.state }}"
        security_opts: "{{ calibre.security_opts }}"
        networks:
          - name: "{{ calibre.network_name }}"
      tags:
        - docker
        - calibre

    - name: CALIBRE_WEB
      community.docker.docker_container:
        name: "{{ calibre_web.name }}"
        image: "{{ calibre_web.image }}"
        env: "{{ calibre_web.vars }}"
        volumes: "{{ calibre_web.volumes }}"
        ports: "{{ calibre_web.ports }}"
        restart_policy: "{{ calibre_web.restart_policy }}"
        state: "{{ calibre_web.state }}"
        networks:
          - name: "{{ calibre_web.network_name }}"
      tags:
        - docker
        - calibre
        - calibre_web

    - name: DUCKDNS
      community.docker.docker_container:
        name: "{{ duckdns.name }}"
        image: "{{ duckdns.image }}"
        env: "{{ duckdns.vars }}"
        volumes: "{{ duckdns.volumes }}"
        restart_policy: "{{ duckdns.restart_policy }}"
        state: "{{ duckdns.state }}"
        networks:
          - name: "{{ duckdns.network_name }}"
      tags:
        - docker
        - duckdns

    - name: PROMETHEUS volume
      community.docker.docker_volume:
        name: prometheus_data
      tags:
        - docker
        - monitoring
        - prometheus

    - name: PROMETHEUS Dir
      ansible.builtin.file:
        path: "{{ common.config_dir }}/prometheus"
        state: directory
        mode: "0755"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      tags:
        - docker
        - monitoring
        - prometheus
      register: jacket_files

    - name: PROMETHEUS Configs
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ common.config_dir }}/prometheus/{{ item }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"
      loop:
        - prometheus.yml
      register: prom_config
      tags:
        - docker
        - monitoring
        - prometheus

    - name: PROMETHEUS
      community.docker.docker_container:
        name: "{{ prometheus.name }}"
        image: "{{ prometheus.image }}"
        volumes: "{{ prometheus.volumes }}"
        restart_policy: "{{ prometheus.restart_policy }}"
        state: "{{ prometheus.state }}"
        ports: "{{ prometheus.ports }}"
        command: "{{ prometheus.command }}"
        networks:
          - name: "{{ prometheus.network_name }}"
      tags:
        - docker
        - monitoring
        - prometheus

    - name: PROMETHEUS Restart # noqa no-handler
      community.docker.docker_container:
        name: "{{ prometheus.name }}"
        image: "{{ prometheus.image }}"
        state: "started"
      when: prom_config.changed
      tags:
        - docker
        - monitoring
        - prometheus

    - name: NODE_EXPORTER
      community.docker.docker_container:
        name: "{{ node_exporter.name }}"
        image: "{{ node_exporter.image }}"
        restart_policy: "{{ node_exporter.restart_policy }}"
        state: "{{ node_exporter.state }}"
        volumes: "{{ node_exporter.volumes }}"
        ports: "{{ node_exporter.ports }}"
        command: "{{ node_exporter.command }}"
        networks:
          - name: "{{ node_exporter.network_name }}"
      tags:
        - docker
        - monitoring
        - node_exporter

    - name: CADVISOR
      community.docker.docker_container:
        name: "{{ cadvisor.name }}"
        image: "{{ cadvisor.image }}"
        restart_policy: "{{ cadvisor.restart_policy }}"
        state: "{{ cadvisor.state }}"
        volumes: "{{ cadvisor.volumes }}"
        devices: "{{ cadvisor.devices }}"
        ports: "{{ cadvisor.ports }}"
        privileged: "{{ cadvisor.privileged }}"
        networks:
          - name: "{{ cadvisor.network_name }}"
      tags:
        - docker
        - monitoring
        - cadvisor

    - name: GRAFANA volume
      community.docker.docker_volume:
        name: grafana_data
      tags:
        - docker
        - monitoring
        - grafana

    - name: GRAFANA Dir
      ansible.builtin.file:
        path: "{{ common.config_dir }}/{{ item }}"
        state: directory
        mode: "0755"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - "grafana"
        - "grafana/provisioning"
        - "grafana/provisioning/dashboards"
        - "grafana/provisioning/datasources"
      tags:
        - docker
        - monitoring
        - grafana

    - name: GRAFANA Datasources
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ common.config_dir }}/grafana/provisioning/datasources/{{ item }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"
      loop:
        - datasource.yml
      register: grafana_ds
      tags:
        - docker
        - monitoring
        - grafana

    - name: GRAFANA Dashboards
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ common.config_dir }}/grafana/provisioning/dashboards/{{ item }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0644"
      loop:
        - dashboard.yml
      register: grafana_db
      tags:
        - docker
        - monitoring
        - grafana

    - name: GRAFANA
      community.docker.docker_container:
        name: "{{ grafana.name }}"
        image: "{{ grafana.image }}"
        volumes: "{{ grafana.volumes }}"
        restart_policy: "{{ grafana.restart_policy }}"
        state: "{{ grafana.state }}"
        ports: "{{ grafana.ports }}"
        env: "{{ grafana.vars }}"
        networks:
          - name: "{{ grafana.network_name }}"
      tags:
        - docker
        - monitoring
        - grafana

    - name: GRAFANA Restart # noqa no-handler
      community.docker.docker_container:
        name: "{{ grafana.name }}"
        image: "{{ grafana.image }}"
        state: "started"
      when:
        - grafana_db.changed
        - grafana_ds.changed
      tags:
        - docker
        - monitoring
        - grafana

    - name: Create PalWorld Docker Network
      community.docker.docker_network:
        name: "palworld"
      tags:
        - docker
        - palworld

    - name: PALWORLD
      community.docker.docker_container:
        name: "{{ palworld.name }}"
        image: "{{ palworld.image }}"
        volumes: "{{ palworld.volumes }}"
        restart_policy: "{{ palworld.restart_policy }}"
        state: "{{ palworld.state }}"
        ports: "{{ palworld.ports }}"
        env: "{{ palworld.vars }}"
        networks:
          - name: "{{ palworld.network_name }}"
          - name: "palworld"
      tags:
        - docker
        - palworld

    - name: RCON
      community.docker.docker_container:
        name: "{{ rcon.name }}"
        image: "{{ rcon.image }}"
        restart_policy: "{{ rcon.restart_policy }}"
        state: "{{ rcon.state }}"
        entrypoint: "{{ rcon.entrypoint }}"
        networks:
          - name: "{{ rcon.network_name }}"
          - name: "palworld"
      tags:
        - docker
        - palworld
        - rcon
